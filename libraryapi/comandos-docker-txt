==============Matando os container criados e criando da forma certa====================
docker ps: lista os container que estão up
docker ps -a: mostra todos os precessos e os containers que estão parados ou ups
COMANDOS:
	Parar container: docker stop + COTAINERID/NOMEDOCONTAINE
	Deletar/excluir um container: docker container rm NOMEDOCONTAINER/CONTAINERID

Criando uma rede/network dentro do docker
	1- docker network create NOME-DA-NETWORK : docker network create library-network

Depois que cria a rede/network usa os comandos anteriores para subir uma nova imagem do Postgres e do PGAdmin4 passando tbm a rede/network criada
docker run --name nome_do_container -p postaPC:postaContainerPadrãoDoPostgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_USER=postgres -e POSTGRES_DB=nome_do_banco --network NOMDE-DA-NETWORK-CRIADA nomdeEversãodaImagem
docker run --name librarydb -p 5432:5432 -e POSTGRES_PASSWORD=postgres -e POSTGRES_USER=postgres -e POSTGRES_DB=library --network library-network postgres:16.8
docker run --name pgadmin4 -p 15432:80 -e PGADMIN_DEFAULT_EMAIL=admin@admin.com -e PGADMIN_DEFAULT_PASSWORD=admin --network library-network dpage/pgadmin4:9

-p = Porta
-e = Variáveis de ambiente

A porta do pc pode ser qualquer porta estando disponível. Ex: -p 3333:5432

===========Comandos Windows para ver se uma porta esta ocupada=================
Comando:
	Mostra a porta especifica
		netstat -aof | findstr NUMERO_DA_PORTA. EX: 5432
	se tiver resultado a porta ta ocupada. Caso contrário ta livre e pode usar

	Mostra todas as portas utilizadas
		netstat -aof